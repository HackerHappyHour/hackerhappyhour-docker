# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'shellwords'

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'docker::docker_service_flags') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    opts = args[0] || {}
    flags = []

    if opts['detach'].to_s != 'true'
      flags << '--detach'
    end
    
    if opts['service_name'].to_s != 'undef'
      flags << "'#{opts['service_name']}'"	    
    end

    if opts['env'].to_s != 'undef'
      flags << "--env '#{opts['env']}'"
    end
    
    if opts['label'].to_s != 'undef'
      flags << "--label '#{opts['label']}'"
    end

    if opts['publish'].to_s != 'undef'
      flags << "--publish '#{opts['publish']}'"
    end
    
    if opts['replicas'].to_s != 'undef'
      flags << "--replicas '#{opts['replicas']}'"
    end      

    if opts['tty'].to_s != 'false'
      flags << '--tty'
    end   
    
    if opts['user'].to_s != 'undef'
      flags << "--user '#{opts['publish']}'"
    end   
    
    if opts['workdir'].to_s != 'undef'
      flags << "--workdir '#{opts['workdir']}'"
    end  
    
    if opts['extra_params'].each do |param|
      flags << param
     end
    end
   
    if opts['image'].to_s != 'undef'
      flags << "'#{opts['image']}'"      
    end

    flags.flatten.join(" ")
  
  end
end
